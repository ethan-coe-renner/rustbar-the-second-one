#+title: Rustbar: The Second One (RBTSO)

This is a reimplementation of my previous rustbar project.
While rustbar was intended for use in sway/i3, rbtso is intended for use with [[https://github.com/conformal/spectrwm][Spectrwm]].
However, RBTSO was written such that it may be easier to use with other bar programs.

* Music
I use [[https://cmus.github.io/][cmus]] for my music listening. I also use [[https://github.com/cmus/cmus/wiki/detachable-cmus][this wiki page]] to use cmus detached.
Though this is not necessary for rbtso to work, it is a very nice solution.
Rbtso simply makes use of =cmus-remote= to get the current song and artist.

* Updates
I use Arch linux and the =checkupdates= script which is included with [[https://archlinux.org/packages/community/x86_64/pacman-contrib/][pacman-contrib]] to check the number of updates available.
To use this with rbtso, put this line into the crontab with a suitable delay

~echo $(checkupdates | wc -l) > ~/.local/share/updates~

I also run this command when I update my system, that way the statusbar immediately updates to 0 after updating.
I have it set up as a keybinding in spectrwm, however a shell alias would work just fine

* Tasks
Rbtso uses [[https://taskwarrior.org/][taskwarrior]] to display the most urgent task in the status bar.

In order to use this, the following must be in the .taskrc file

#+begin_src conf
  report.statbar.description = Displays pending tasks in order of descending urgency
  report.statbar.columns = description
  report.statbar.labels = Description
  report.statbar.filter = status:pending
  report.statbar.sort = urgency-
#+end_src

This is used by rbtso, which runs ~task rc.verbose: limit:1 statbar~ to get the most urgent task

* News
Currently I use [[https://github.com/skeeto/elfeed][elfeed]] to manage my rss feeds. The goal is to have a way to display the number of unread articles in the status bar, however it does not really work.

The following is a part of a .el file which is run by a cronjob and the result is put in ~/.local/share/newsunread, which is read to display in the status bar.

#+begin_src emacs-lisp
  (elfeed)
  (elfeed-update)
  (setq output (elfeed-search--count-unread))
  (princ (car (split-string output "/")))
#+end_src

This is not the intended use for ~(elfeed-search--count-unread)~, so it does not really work and I am trying to find a more elegant way to accomplish this

* Volume
The volume widget assumes pulseaudio and pamixer are installed.

* Battery
The battery widget is designed not to use any external programs, thus it should work out of the box

